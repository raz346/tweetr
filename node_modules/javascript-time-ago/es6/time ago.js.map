{"version":3,"sources":["../source/time ago.js"],"names":["IntlMessageFormat","classify_elapsed","style","Javascript_time_ago","locales","options","formatters","Array","isArray","concat","locale","resolve_locale","input","locale_data","flavour","date","time","constructor","Date","getTime","Error","now","elapsed","override","undefined","units","filter","indexOf","unit","Math","abs","gradation","amount","get_formatters","formatter","default","current","previous_next","format","when","compile_formatters","formatter_messages","past_formatter_messages","past","future_formatter_messages","future","past_formatter","future_formatter","key","replace","message","default_formatter","previous","next","previous_next_message","default_locale","locale_parts","split","length","locale_try","join","pop","locale_data_map","main","from_CLDR","long","data","converted","short","dates","fields","entry","converted_entry","test","subkey","prefix","converted_subkey"],"mappings":"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","file":"time ago.js","sourcesContent":["// a part of this code is adopted from\r\n// https://github.com/yahoo/intl-relativeformat/\r\n\r\nimport IntlMessageFormat from 'intl-messageformat'\r\nimport classify_elapsed  from './classify elapsed'\r\nimport style             from './style'\r\n\r\nexport default class Javascript_time_ago\r\n{\r\n\t// Fallback locale\r\n\t// (when not a single supplied preferred locale is available)\r\n\tstatic default_locale = 'en'\r\n\r\n\t// For all configured locales\r\n\t// their relative time formatter messages will be stored here\r\n\tstatic locale_data = {}\r\n\r\n\t// Relative time interval message formatters cache\r\n\tformatters = {}\r\n\r\n\tconstructor(locales, options)\r\n\t{\r\n\t\t// Make a copy of `locales` if it's an array, so that it doesn't change\r\n\t\t// since it's used lazily.\r\n\t\tif (Array.isArray(locales))\r\n\t\t{\r\n\t\t\tlocales = locales.concat()\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\tthis.locale = resolve_locale(locales)\r\n\r\n\t\t// Is passed later on to `IntlMessageFormat`\r\n\t\tthis.locales = locales\r\n\r\n\t\t// Presets\r\n\t\tthis.style = style(locales)\r\n\t}\r\n\r\n\t// Formats the relative date.\r\n\t//\r\n\t// Returns: a string\r\n\t//\r\n\t// Parameters:\r\n\t//\r\n\t//    options - (optional)\r\n\t//\r\n\t//       units     - a list of allowed time units\r\n\t//                   (e.g. ['second', 'minute', 'hour', â€¦])\r\n\t//\r\n\t//       gradation - time scale gradation steps.\r\n\t//                   (e.g.\r\n\t//                   [\r\n\t//                      { unit: 'second', factor: 1 }, \r\n\t//                      { unit: 'minute', factor: 60, threshold: 60 },\r\n\t//                      â€¦\r\n\t//                   ])\r\n\t//\r\n\t//       override - function ({ elapsed, time, date, now })\r\n\t//\r\n\t//                  If the `override` function returns a value,\r\n\t//                  then the `.format()` call will return that value.\r\n\t//                  Otherwise it has no effect.\r\n\t//\r\n\tformat(input, options = {})\r\n\t{\r\n\t\t// Get locale messages for this formatting flavour\r\n\t\tconst { flavour, locale_data } = this.locale_data(options.flavour)\r\n\r\n\t\tlet date\r\n\t\tlet time\r\n\t\t\r\n\t\tif (input.constructor === Date)\r\n\t\t{\r\n\t\t\tdate = input\r\n\t\t\ttime = input.getTime()\r\n\t\t}\r\n\t\telse if (typeof input === 'number')\r\n\t\t{\r\n\t\t\ttime = input\r\n\t\t\tdate = new Date(input)\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n\t\t}\r\n\r\n\t\t// can pass a custom `now` for testing purpose\r\n\t\tconst now = options.now || Date.now()\r\n\r\n\t\t// how much time elapsed (in seconds)\r\n\t\tconst elapsed = (now - time) / 1000 // in seconds\r\n\r\n\t\t// Allows output customization.\r\n\t\t// For example, seconds, minutes and hours can be shown relatively,\r\n\t\t// and other intervals can be shown using full date format.\r\n\t\t// (see Twitter style)\r\n\t\tif (options.override)\r\n\t\t{\r\n\t\t\tconst override = options.override({ elapsed, time, date, now })\r\n\t\t\tif (override !== undefined)\r\n\t\t\t{\r\n\t\t\t\treturn override\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Available time interval measurement units\r\n\t\tlet units = Object.keys(locale_data)\r\n\r\n\t\tif (options.units)\r\n\t\t{\r\n\t\t\t// Find available time interval measurement units\r\n\t\t\tunits = options.units.filter(unit => units.indexOf(unit) >= 0)\r\n\t\t}\r\n\r\n\t\t// Choose the appropriate time measurement unit \r\n\t\t// and get the corresponding rounded time amount\r\n\t\tconst { unit, amount } = classify_elapsed(Math.abs(elapsed), units, options.gradation)\r\n\r\n\t\t// If no time unit is suitable, just output empty string\r\n\t\tif (!unit)\r\n\t\t{\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\t// format the message for the chosen time measurement unit\r\n\t\t// (second, minute, hour, day, etc)\r\n\r\n\t\tconst formatters = this.get_formatters(unit, flavour)\r\n\r\n\t\t// default formatter: \"X units\"\r\n\t\tlet formatter = formatters.default\r\n\r\n\t\t// in case of \"0 units\"\r\n\t\tif (amount === 0 && formatters.current)\r\n\t\t{\r\n\t\t\tformatter = formatters.current\r\n\t\t}\r\n\r\n\t\t// in case of \"previous unit\" or \"next unit\"\r\n\t\tif ((amount === -1 || amount === 1) && formatters.previous_next)\r\n\t\t{\r\n\t\t\tformatter = formatters.previous_next\r\n\t\t}\r\n\r\n\t\t// return formatted time amount\r\n\t\treturn formatter.format\r\n\t\t({\r\n\t\t\t'0'  : amount,\r\n\t\t\twhen : elapsed >= 0 ? 'past' : 'future'\r\n\t\t})\r\n\t}\r\n\r\n\t// Gets locale messages for this formatting flavour\r\n\tlocale_data(flavour)\r\n\t{\r\n\t\t// Get relative time formatter messages for this locale\r\n\t\tconst locale_data = Javascript_time_ago.locale_data[this.locale]\r\n\r\n\t\t// Fallback to \"default\" flavour if the given flavour isn't available\r\n\t\tif (!flavour || !locale_data[flavour])\r\n\t\t{\r\n\t\t\tflavour = 'default'\r\n\t\t}\r\n\r\n\t\treturn { flavour, locale_data: locale_data[flavour] }\r\n\t}\r\n\r\n\t// lazy creation of a formatter for a given time measurement unit\r\n\t// (second, minute, hour, day, etc)\r\n\tget_formatters(unit, flavour)\r\n\t{\r\n\t\tif (!this.formatters[flavour])\r\n\t\t{\r\n\t\t\tthis.formatters[flavour] = {}\r\n\t\t}\r\n\r\n\t\tconst formatters = this.formatters[flavour]\r\n\r\n\t\t// Create a new synthetic message based on the locale data from CLDR.\r\n\t\tif (!formatters[unit])\r\n\t\t{\r\n\t\t\tformatters[unit] = this.compile_formatters(unit, flavour)\r\n\t\t}\r\n\r\n\t\treturn formatters[unit]\r\n\t}\r\n\r\n\t// compiles formatter for the specified time measurement unit \r\n\t// (second, minute, hour, day, etc)\r\n\tcompile_formatters(unit, flavour)\r\n\t{\r\n\t\t// Locale specific time interval formatter messages\r\n\t\t// for the given time interval measurement unit\r\n\t\tconst formatter_messages = Javascript_time_ago.locale_data[this.locale][flavour][unit]\r\n\r\n\t\t// Locale specific time interval formatter messages\r\n\t\t// for the given time interval measurement unit\r\n\t\t// for \"past\" and \"future\"\r\n\t\t//\r\n\t\t// (e.g.\r\n\t\t//  {\r\n\t\t//   \"relativeTimePattern-count-one\": \"{0} second ago\",\r\n\t\t//   \"relativeTimePattern-count-other\": \"{0} seconds ago\"\r\n\t\t//  })\r\n\t\t//\r\n\t\tconst past_formatter_messages   = formatter_messages.past\r\n\t\tconst future_formatter_messages = formatter_messages.future\r\n\r\n\t\t// `format.js` number formatter messages\r\n\t\t// e.g. \"one {# second ago} other {# seconds ago}\"\r\n\t\tlet past_formatter   = ''\r\n\t\tlet future_formatter = ''\r\n\r\n\t\t// Compose \"past\" formatter specification\r\n\t\t// (replacing CLDR number placeholder \"{0}\" \r\n\t\t//  with format.js number placeholder \"#\")\r\n\t\tfor (let key of Object.keys(past_formatter_messages))\r\n\t\t{\r\n\t\t\tpast_formatter += ` ${key} \r\n\t\t\t\t\t{${past_formatter_messages[key].replace('{0}', '#')}}`\r\n\t\t}\r\n\r\n\t\t// Compose \"future\" formatter specification\r\n\t\t// (replacing CLDR number placeholder \"{0}\" \r\n\t\t//  with format.js number placeholder \"#\")\r\n\t\tfor (let key of Object.keys(future_formatter_messages))\r\n\t\t{\r\n\t\t\t// e.g. += \" one {# sec. ago}\"\r\n\t\t\tfuture_formatter += ` ${key} \r\n\t\t\t\t\t{${future_formatter_messages[key].replace('{0}', '#')}}`\r\n\t\t}\r\n\r\n\t\t// The ultimate time interval `format.js` specification\r\n\t\t// (\"0\" will be replaced with the first argument\r\n\t\t//  when the message will be formatted)\r\n\t\tconst message = `{ when, select, past   {{0, plural, ${past_formatter}}}\r\n\t\t                                 future {{0, plural, ${future_formatter}}} }`\r\n\r\n\t\t// Create the synthetic IntlMessageFormat instance \r\n\t\t// using the original locales specified by the user\r\n\t\tconst default_formatter = new IntlMessageFormat(message, this.locales)\r\n\r\n\t\tconst formatters = \r\n\t\t{\r\n\t\t\tdefault: default_formatter\r\n\t\t}\r\n\r\n\t\t// \"0 units\" formatter\r\n\t\tif (formatter_messages.current)\r\n\t\t{\r\n\t\t\tformatters.current =\r\n\t\t\t{\r\n\t\t\t\tformat: () => formatter_messages.current\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// \"previous unit\" and \"next unit\" formatter\r\n\t\tif (formatter_messages.previous && formatter_messages.next)\r\n\t\t{\r\n\t\t\tconst previous_next_message = `{ when, select, past   {${formatter_messages.previous}}\r\n\t\t\t                                               future {${formatter_messages.next}} }`\r\n\t\t\r\n\t\t\t// Create the synthetic IntlMessageFormat instance \r\n\t\t\t// using the original locales specified by the user\r\n\t\t\tformatters.previous_next = new IntlMessageFormat(previous_next_message, this.locales)\r\n\t\t}\r\n\r\n\t\treturn formatters\r\n\t}\r\n}\r\n\r\n// Chooses the most appropriate locale \r\n// based on the list of preferred locales supplied by the user\r\nexport function resolve_locale(locales)\r\n{\r\n\t// Suppose it's an array\r\n\tif (typeof locales === 'string')\r\n\t{\r\n\t\tlocales = [locales]\r\n\t}\r\n\r\n\t// Create a copy of the array so we can push on the default locale.\r\n\tlocales = (locales || []).concat(Javascript_time_ago.default_locale)\r\n\r\n\t// Using the set of locales + the default locale, we look for the first one\r\n\t// which that has been registered. When data does not exist for a locale, we\r\n\t// traverse its ancestors to find something that's been registered within\r\n\t// its hierarchy of locales. Since we lack the proper `parentLocale` data\r\n\t// here, we must take a naive approach to traversal.\r\n\tfor (let locale of locales)\r\n\t{\r\n\t\tconst locale_parts = locale.split('-')\r\n\r\n\t\twhile (locale_parts.length)\r\n\t\t{\r\n\t\t\tconst locale_try = locale_parts.join('-')\r\n\r\n\t\t\tif (Javascript_time_ago.locale_data[locale_try])\r\n\t\t\t{\r\n\t\t\t\t// Return the normalized locale string; \r\n\t\t\t\t// e.g., we return \"en-US\",\r\n\t\t\t\t// instead of \"en-us\".\r\n\t\t\t\treturn locale_try\r\n\t\t\t}\r\n\r\n\t\t\tlocale_parts.pop()\r\n\t\t}\r\n\t}\r\n\r\n\tthrow new Error(`No locale data has been added for any of the locales: ${locales.join(', ')}`)\r\n}\r\n\r\n// Adds locale data\r\nJavascript_time_ago.locale = function(locale_data)\r\n{\r\n\tlet locale\r\n\tlet locale_data_map\r\n\r\n\tif (!locale_data)\r\n\t{\r\n\t\tthrow new Error(`The passed in locale data is undefined`)\r\n\t}\r\n\r\n\tif (locale_data.main)\r\n\t{\r\n\t\tlocale = Object.keys(locale_data.main)[0]\r\n\r\n\t\t// Convert from CLDR format\r\n\t\tlocale_data_map = from_CLDR(locale_data)\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlocale = locale_data.locale\r\n\r\n\t\tlocale_data_map = {}\r\n\r\n\t\t// Supports multiple locale variations\r\n\t\t// (e.g. \"default\", \"short\", \"normal\", \"long\", etc)\r\n\t\tfor (let key of Object.keys(locale_data))\r\n\t\t{\r\n\t\t\tif (key !== 'locale')\r\n\t\t\t{\r\n\t\t\t\tlocale_data_map[key] = locale_data[key]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Guard against malformed input\r\n\tif (!locale)\r\n\t{\r\n\t\tthrow new Error(`Couldn't determine locale for this locale data. Make sure the \"locale\" property is present.`)\r\n\t}\r\n\r\n\t// Ensure default formatting flavour is set\r\n\tif (!locale_data_map.default)\r\n\t{\r\n\t\tlocale_data_map.default = locale_data_map.long || locale_data_map[Object.keys(locale_data_map)[0]]\r\n\t}\r\n\r\n\t// Store locale specific messages in the static variable\r\n\tJavascript_time_ago.locale_data[locale] = locale_data_map\r\n\r\n\t// (will be added manually by this library user)\r\n\t// // Add locale data to IntlMessageFormat\r\n\t// // (to be more specific: the `pluralRuleFunction`)\r\n\t// require('intl-messageformat/locale-data/ru')\r\n}\r\n\r\n// Converts locale data from CLDR format (if needed)\r\nexport function from_CLDR(data)\r\n{\r\n\t// the usual time measurement units\r\n\tconst units = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']\r\n\r\n\t// result\r\n\tconst converted = { long: {} }\r\n\r\n\t// detects the short flavour of labels (yr., mo., etc)\r\n\tconst short = /-short$/\r\n\r\n\tconst locale = Object.keys(data.main)[0]\r\n\tdata = data.main[locale].dates.fields\r\n\r\n\tfor (let key of Object.keys(data))\r\n\t{\r\n\t\t// take only the usual time measurement units\r\n\t\tif (units.indexOf(key) < 0 && units.indexOf(key.replace(short, '')) < 0)\r\n\t\t{\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tconst entry = data[key]\r\n\t\tconst converted_entry = {}\r\n\r\n\t\t// if a key ends with `-short`, then it's a \"short\" flavour\r\n\t\tif (short.test(key))\r\n\t\t{\r\n\t\t\tif (!converted.short)\r\n\t\t\t{\r\n\t\t\t\tconverted.short = {}\r\n\t\t\t}\r\n\r\n\t\t\tconverted.short[key.replace(short, '')] = converted_entry\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconverted.long[key] = converted_entry\r\n\t\t}\r\n\r\n\t\t// the \"relative\" values aren't suitable for \"ago\" or \"in a\" cases,\r\n\t\t// because \"1 year ago\" != \"last year\"\r\n\r\n\t\t// if (entry['relative-type--1'])\r\n\t\t// {\r\n\t\t// \tconverted_entry.previous = entry['relative-type--1']\r\n\t\t// }\r\n\r\n\t\t// if (entry['relative-type-0'])\r\n\t\t// {\r\n\t\t// \tconverted_entry.current = entry['relative-type-0']\r\n\t\t// }\r\n\r\n\t\t// if (entry['relative-type-1'])\r\n\t\t// {\r\n\t\t// \tconverted_entry.next = entry['relative-type-1']\r\n\t\t// }\r\n\r\n\t\tif (entry['relativeTime-type-past'])\r\n\t\t{\r\n\t\t\tconst past = entry['relativeTime-type-past']\r\n\t\t\tconverted_entry.past = {}\r\n\r\n\t\t\tfor (let subkey of Object.keys(past))\r\n\t\t\t{\r\n\t\t\t\tconst prefix = 'relativeTimePattern-count-'\r\n\t\t\t\tconst converted_subkey = subkey.replace(prefix, '')\r\n\r\n\t\t\t\tconverted_entry.past[converted_subkey] = past[subkey]\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (entry['relativeTime-type-future'])\r\n\t\t{\r\n\t\t\tconst future = entry['relativeTime-type-future']\r\n\t\t\tconverted_entry.future = {}\r\n\r\n\t\t\tfor (let subkey of Object.keys(future))\r\n\t\t\t{\r\n\t\t\t\tconst prefix = 'relativeTimePattern-count-'\r\n\t\t\t\tconst converted_subkey = subkey.replace(prefix, '')\r\n\r\n\t\t\t\tconverted_entry.future[converted_subkey] = future[subkey]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn converted\r\n}"]}